<!-- 
        3.4.列表渲染
        列表渲染，重复的渲染生成组件，
        wx:for属性
 -->
<!-- 将博主每一周推荐的电影全部都放在weekly上展示 -->
<!-- 
        如何对剩下的推荐做同样的渲染输出？
        第一种方式:手动增加，不推荐，
        第2种方法，在试图层提供循环的控制结构，
 -->
<!-- 
         在电影的名称之前显示,这是博主第几周推荐的电影，
  -->
<!-- 
          3.5.使用swiper组件
          使用组件，从列表展示变为幻灯片轮播展示，
          幻灯片轮播的样式优化，

          swiper初步实现滑动切换效果
          swiper实现滑动切换图片的效果,但是文字没显示成功
   -->
<!-- 
           要实现幻灯片的效果,需将view改成swiper-item并放置在swiper中
    -->
<!-- 
        3.6.页面的生命周期函数
        需求1，Swiper中如何默认切换到最后一页幻灯片，
        需求2，非本周幻灯片页添加返回本周按钮，
        页面状态数据如何初始化？onload(options)
        onShow，onReady
        onHide,onUnload
 -->
<!-- 
        3.7.更新数据
        this.setData()方法
        小程序并没有提供类似DOM的JS API来直接更新视图
        this.setData()方法-更新数据并让框架自动更新相关视图
        更新是增量式的
        单项绑定
 -->
<!-- 
         3.8.事件机制-响应用户交互
         事件绑定
         冒泡世界与非冒泡世界
         bind绑定 VS catch绑定

         1.冒泡事件和非冒泡事件:
         冒泡事件:当一个组件上的事件被触发后，该事件会向父节点传递
         非冒泡事件:当一个组件上的事件被触发后，该事件不会向父节点传递
  -->
<!-- 
          4.1.组件的自定义数据属性
          需求1:从weekly页上的电影卡片跳转到电影详情页
          新增detail页
          如何在逻辑层调用小程序的导航内API来实现页面跳转
          wx.navigateTo()
          参数化的page path
          组件的自定义数据属性:向逻辑层的业务数据传递
   -->
<!-- class="container"应用全局样式 -->
<view class="">
        <!-- <text>本周推荐</text> -->
        <!-- 显示swiper的面板指示 -->
        <!-- 增大每一页幻灯片的空间 -->
        <!-- 页面左右两边留空 -->
        <!-- 在swiper中使用current属性设置首页幻灯片序号 -->
        <!-- 
                需求1，Swiper中如何默认切换到最后一页幻灯片，
                将current值绑定到weeklyMovieList数组长度-1上,即为最后一张幻灯片(最新本周)
         -->
        <!-- 2.将current值的绑定改为新的内部状态变量 -->
        <swiper class="movie-swiper" indicator-dots='{{true}}' previous-margin="50rpx" next-margin="50rpx"
                current='{{currentIndex}}'>
                <swiper-item class="movie" wx:for="{{weeklyMovieList}}">
                        <!-- 将图片和文字封装到view采用全局样式 -->
                        <!-- 全局中view元素的高度设成100vh大于swiper的90vh,因此将此view元素设成swiper的100% -->
                        <!-- 为movie-card元素绑定bindtap事件函数f2 -->
                        <!-- 
                                在当前view元素上声明一个data-user-name自定义的属性
                                最后被封装到event.currentTarget中的dataset的userName中
                         -->
                        <!-- 
                                 我们需要在当前view元素上定义data-movie-id属性
                          -->
                        <view class="container movie-card" bindtap="f2" data-user-name="blabla"
                                data-movie-id="{{item.id}}">
                                <image class="movie-image" src="{{item.imagePath}}"></image>
                                <!-- 删除原来将文字封装一起的movie-detail样式,实现均匀分布 -->
                                <!-- 在视图层显示电影ID -->
                                <text>{{item.id}}</text>
                                <text>第{{index+1}}周:{{item.name}}</text>
                                <text>点评:{{item.comment}}</text>
                                <!-- <text>{{count + score}}</text> -->
                                <!-- 条件表达式 -->
                                <!-- <text>{{(score>=60)?"及格":"不及格"}}</text> -->
                                <!-- <text wx:if="{{thisWeekMovie.isHighlyRecommended}}" style="font-size:16px;color:red;">强烈推荐</text>    -->
                                <!-- 使用hidden属性渲染 -->
                                <text hidden="{{!item.isHighlyRecommended}}"
                                        style="font-size:16px;color:red;">强烈推荐</text>
                                <!-- 添加返回本周的按钮 -->
                                <!-- 
                                        当序号小于序号最后一张幻灯片序号时,渲染返回本周
                                        易错点:length一定首字母是小写
                                -->
                                <!-- 
                                        需求2，非本周幻灯片页添加返回本周按钮
                                        1.需要给按钮绑定一个触发事件
                                -->
                                <text bindtap="f0" wx:if="{{index < (weeklyMovieList.length-1)}}"
                                        class="return-button">返回本周</text>
                        </view>
                </swiper-item>
        </swiper>
        <!-- 
              1.新增示例代码:讲解如何在逻辑层对内部数据进行读和写
         -->
        <!-- <text>{{count}}</text> -->
        <!-- 3.希望每次点击时对内部状态的变量值加1 -->
        <!-- 
                 2.catchtap和bindtap的区别:
                 bindtap绑定触发的tap事件就会向上冒泡传递给父元素,当前元素上并不会阻挡自己的冒泡事件向上冒泡传递;button元素被点击后会触发tap事件,对应的f1会被调用执行,同时冒泡事件会向上传递给view元素,view元素会重新渲染;
                 catchtap绑定,button元素会阻止自己触发的冒泡事件向上传递,button元素被点击之后,自己触发tap事件,自己会调用自己的f1处的函数来处理,但事件不会向上冒泡,也就是父元素view元素不会触发tap事件,所以view元素本身不会对这个事件作进一步的处理;
                 catchtap多用于在当前元素进行处理事件,并不需要当前元素的父元素或者祖先元素作进一步的处理;
        -->
        <!-- <button catchtap="f1">+1</button> -->
        <!-- swiper元素的默认高度为150px, image元素默认高度为240px,所以image相当于只显示了上面这一部分-->
        <!-- <swiper style="background:#eee;height:260px;">
                <swiper-item>
                <text>123</text>
                <image src="/images/jf.jpg"></image>
                </swiper-item>
                <swiper-item>
                <text>456</text>
                <image src="/images/titanic.jpg"></image>
                </swiper-item>
                <swiper-item>
                <text>789</text>
                <image src="/images/zgssbtl.jpg"></image>
                </swiper-item>
        </swiper> -->
</view>

<!-- 3.2小程序运行环境和基本架构
        运行环境:
        每个小程序都是运行在他所在的微信客户端上的，
        通过微信客户端给他提供的运行环境，小程序可以
        直接获取微信客户端的原生体验和原生能力， 
        
        基本架构可以分为视图层和逻辑层两层架构,视图层也被称为渲染层，
        wxml试图文件和wxss样式文件都是对渲染层的描述，
        脚本文件js文件是对页面的逻辑层的描述，
        
        about页和weekly页,都内置了一个webviewId的内部状态变量，来记
        录他们各自是在几号webview进程之中进行渲染的-->

<!-- 3.3条件渲染
        条件渲染，条件成立时组建才渲染生成
        wx:if
        wx:if VS hidden 
        
        需求:在视图中，对于那些博主强烈推荐的电影，我们要显示一个强烈推荐的红色的标记
        思路:首先我们把强烈推荐的这个元素给它定义出来，
        1.在weekly.js中添加isHighlyRecommended:true字段,用于表示是否为博主强力推荐
        2.在weekly.wxml中加入"强烈推荐"的text元素
        
        强烈推荐这个text的元素,
        它的渲染生成的条件是:绑定到了thisWeekMovieIsHighlyRecommended属性上
        thisWeekMovie.isHighlyRecommended为true时,生成红色"强烈推荐"
        thisWeekMovie.isHighlyRecommended为false时,不生成

        使用条件渲染与使用hidden属性有什么区别？
        需要对控制语句进行求反,因为当前紧张博主对这个电影是强烈推荐的时候，我们是要显示出强烈推荐这个标志，而不是隐藏，
        语法上:使用hidden属性时，这个元素总是要先被渲染生成的，hidden属性只是控制了其可见性而已，
        使用上的选择:对于可见性需要频繁切换的时候，我们就不建议使用条件渲染，推荐使用hidden
        对于hidden而言，即使用户得到了数据里面博主没有强烈推荐这个电影，那么他也会在初始生成的时候去生成这么一个元素，
        hidden初始化开销会大一些

-->